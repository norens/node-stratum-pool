{
  "description": "A wrapper and enhancements for fs.watch",
  "license": "MIT",
  "name": "node-watch",
  "repository": {
    "url": "git://github.com/yuanchuan/node-watch.git",
    "type": "git"
  },
  "keywords": [
    "fs.watch",
    "watch",
    "watchfile"
  ],
  "version": "0.5.5",
  "bugs": {
    "url": "https://github.com/yuanchuan/node-watch/issues"
  },
  "url": "https://github.com/yuanchuan/node-watch",
  "author": {
    "name": "yuanchuan",
    "email": "yuanchuan23@gmail.com",
    "url": "http://yuanchuan.name"
  },
  "main": "./index.js",
  "homepage": "https://github.com/yuanchuan/node-watch#readme",
  "scripts": {
    "test": "mocha"
  },
  "devDependencies": {
    "fs-extra": "^1.0.0",
    "mocha": "^3.2.0"
  },
  "readme": "# node-watch [![Status](https://travis-ci.org/yuanchuan/node-watch.svg?branch=master)](https://travis-ci.org/yuanchuan/node-watch \"See test builds\")\n\nA wrapper and enhancements for [fs.watch](http://nodejs.org/api/fs.html#fs_fs_watch_filename_options_listener) (with 0 dependencies).\n\n[![NPM](https://nodei.co/npm/node-watch.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/node-watch.png/)\n\n\n## Installation\n\n```bash\nnpm install node-watch\n```\n\n## Example\n\n```js\nvar watch = require('node-watch');\n\nwatch('file_or_dir', { recursive: true }, function(evt, name) {\n  console.log('%s changed.', name);\n});\n```\n\nThis is a completely rewritten version, **much faster** and in a more **memory-efficient** way.\nSo with recent nodejs under OS X or Windows you can do something like this:\n\n```js\n// watch the whole disk\nwatch('/', { recursive: true }, console.log);\n```\n\n\n## Why?\n\n* Some editors will generate temporary files which will cause the callback function to be triggered multiple times.\n* When watching a single file the callback function will only be triggered once.\n* <del>Missing an option to watch a directory recursively.</del>\n* Recursive watch is not supported on Linux or in older versions of nodejs.\n\n\n## Events\n\nThe events provided by the callback function is either `update` or `remove`, which is less confusing to `fs.watch`'s `rename` and `change`.\n\n```js\nwatch('./', function(evt, name) {\n\n  if (evt == 'update') {\n    // on create or modify\n  }\n\n  if (evt == 'remove') {\n    // on delete\n  }\n\n});\n```\n\n## Options\n\nThe usage and options of `node-watch` is fully compatible with [fs.watch](https://nodejs.org/dist/latest-v7.x/docs/api/fs.html#fs_fs_watch_filename_options_listener).\n* `persistent: <Boolean>` default = **true**\n* `recursive: <Boolean>` default = **false**\n* `encoding: <String>` default = **'utf8'**\n\n##### Extra options\n\n* `filter: <RegExp | Function>` filter using regular expression or custom function.\n\n```js\n// watch only for json files\nwatch('./', { filter: /\\.json$/ }, console.log);\n\n// ignore node_modules\nwatch('./', {\n  recursive: true,\n  filter: function(name) {\n    return !/node_modules/.test(name);\n  }\n}, console.log);\n```\n\n## Watcher object\n\nThe watch function returns a [fs.FSWatcher](https://nodejs.org/api/fs.html#fs_class_fs_fswatcher) like object as the same as `fs.watch` (>= v0.4.0).\n\n```js\nvar watcher = watch('./', { recursive: true });\n\nwatcher.on('change', function(evt, name) {\n  // callback\n});\n\nwatcher.on('error', function(err) {\n  // handle error\n});\n\n// close\nwatcher.close();\n\n// is closed?\nwatcher.isClosed()\n```\nThe watcher object is also an instance of [EventEmitter](https://nodejs.org/dist/latest-v7.x/docs/api/events.html#events_class_eventemitter).\nThis's a list of methods for watcher specifically:\n\n* `.on`\n* `.once`\n* `.emit`\n* `.close`\n* `.listeners`\n* `.setMaxListeners`\n* `.getMaxListeners`\n\n##### Extra methods\n* `.isClosed` detect if the watcher is closed\n\n\n## Known issues\n\n**Windows, node < v4.2.5**\n\n  * Failed to detect `remove` event\n  * Failed to get deleted filename or directory name\n\n## Misc\n\n#### 1. Watch multiple files or directories in one place\n```js\nwatch(['file1', 'file2'], console.log);\n```\n\n#### 2. Customize watch command line tool\n```js\n#!/usr/bin/env node\n\n// https://github.com/nodejs/node-v0.x-archive/issues/3211\nrequire('epipebomb')();\n\nvar watcher = require('node-watch')(\n  process.argv[2] || './', { recursive: true }, console.log\n);\n\nprocess.on('SIGINT', watcher.close);\n```\nMonitoring chrome from disk:\n```bash\n$ watch / | grep -i chrome\n```\n\n## License\nMIT\n\nCopyright (c) 2012-2017 [yuanchuan](https://github.com/yuanchuan)\n\n",
  "readmeFilename": "README.md",
  "_id": "node-watch@0.5.5",
  "_from": "node-watch@0.5.5"
}
